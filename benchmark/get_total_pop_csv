#!/usr/bin/env python3

"""
This file is called from ./get_pops_csv so it does not need to be invoked separetly

Instead of cating all popualtions together in .pop format. This script will combine all populations in .csv format into a dataframe to easily drop duplicates. Then non-dominated cases will also be droped. Adapted from pop2csv.py
"""
import os, argparse
import pandas as pd
import numpy as np
import glob
from libdomi import fdom

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('results_path', help='Path to results')
    default_output_name = "case_all_out.csv"
    parser.add_argument('-o','--output_path', help='output file name', default=default_output_name, type=str)
    args = parser.parse_args()

    if args.output_path == default_output_name:
        output_path = os.path.join(args.results_path, default_output_name)
    else:
        output_path = args.output_path

    # Load data
    df = pd.concat((pd.read_csv(f) for f in glob.glob(f"{args.results_path}/case*_out.csv")))
    df = df.drop('Solution index', 1)

    # code below is from pop2csv.py
    #-----------------------------#
    # Remove duplicated solutions
    obj_idx = df.columns.str.contains(r'\(objective\)')
    prior_size = df.shape[0]
    df = df.drop_duplicates(subset=df.columns[np.logical_not(obj_idx)])  # Do  not consider objectives in case of FP error
    print(f"Unique solutions:\t\t {df.shape[0]}/{prior_size}")

    # Only keep non-dominated solutions
    a = df.iloc[:,obj_idx].values
    non_dominated_idx = fdom(a)
    print(f"Non-dominated solutions:\t {np.sum(non_dominated_idx)}/{df.shape[0]}")
    if (np.sum(non_dominated_idx) < df.shape[0]):
        df = df.iloc[non_dominated_idx.flatten(),:]
        df.reset_index(inplace=True, drop=True)

    # Add solution index
    df.insert(loc=0, column='Solution index', value=[_ for _ in range(df.shape[0])])

    #Save
    df.to_csv(output_path, index=False)
    #-----------------------------#

if __name__ == '__main__':
    main()
